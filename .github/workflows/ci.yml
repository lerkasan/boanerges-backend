name: Build Jar and Test via Maven then Build and Push Docker Image

on:
  push:
    branches:
      - master
    paths-ignore:
#      - '.github/**'
      - 'README.md'
      - '.gitignore'
      - '.dockerignore'

# for debugging purposes
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  IMAGE_TAG: ${{ github.sha }}
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'
  SETUP_JAVA_CACHE: 'maven'
  CODEDEPLOY_APPLICATION: 'boanerges'
  DEPLOYMENT_GROUP: 'production'
  AWS_REGION: 'us-east-1'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Build a JAR package via Maven
        run: mvn --batch-mode --no-transfer-progress -DskipTests clean package

      - name: Upload JAR package as Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce   # v3.1.2
        if: success()
        with:
          name: JAR package
          path: target/*.jar


  test:
    name: Run Unit Tests
    needs: build
    runs-on: ubuntu-latest
    permissions:
      checks: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Run Unit Tests via Maven
        run: mvn --batch-mode --no-transfer-progress clean test

      - name: Upload JUnit Test Report as Artifact
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce   # v3.1.2
        if: success() || failure()
        with:
          name: JUnit Test Report
          path: target/surefire-reports/*.xml

#      - name: Publish JUnit Test Report
#        uses: dorny/test-reporter@c9b3d0e2bd2a4e96aaf424dbaa31c46b42318226   # v1.6.0
#        if: success() || failure()
#        with:
#          name: JUnit Test Report
#          path: target/surefire-reports/*.xml
#          reporter: java-junit
#          fail-on-error: true


  publish_jar_package:
    name: Publish JAR package to GitHub Packages
    needs: [ build, test ]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539     # v3.5.3

      - name: Set up JDK
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2   # v3.11.0
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          cache: ${{ env.SETUP_JAVA_CACHE }}

      - name: Publish JAR package to GitHub Packages
        run: mvn --batch-mode --no-transfer-progress clean deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish_docker_image:
    name: Build and Push Docker Image to GitHub Container Registry
    needs: [ build, test ]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write       # For signing images via sigstore/cosign with GitHub OIDC Token
    steps:
      - name: Checkout backend repository
        uses: actions/checkout@98637d7db679cd12b4ae373378e391551b922539   # v3.5.3

      - name: Install cosign
        uses: sigstore/cosign-installer@d13028333d784fcc802b67ec924bcebe75aa0a5f   # v3.1.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc   # v2.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: docker_meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175   # v4.6.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha,format=long

      - name: Build and Push container images
        id: docker_build_and_push
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825   # v4.1.1
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ steps.docker_meta.outputs.tags }}

      - name: Sign the Docker images with GitHub OIDC Token
        env:
          DIGEST: ${{ steps.docker_build_and_push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: cosign sign --yes "${TAGS}@${DIGEST}"


  deploy:
    name: Deploy to AWS EC2
    needs: [ publish_docker_image ]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Get AWS Credentials
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355   # v2.2.0
        with:
#          role-to-assume: ${{ secrets.PIPELINE_IAM_ROLE }}
#          role-session-name: GitHub-Action-Role
          aws-access-key-id: ${{ secrets.PIPELINE_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PIPELINE_AWS_SECRET_KEY_ID }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Check for other ongoing deployment
        id: deployment_in_progress
        run: |
          deployments=$(aws deploy list-deployments --application-name ${{ env.CODEDEPLOY_APPLICATION }} --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} --region ${{ env.AWS_REGION }} --include-only-statuses "InProgress" --output json)
          count=$(echo $deployments | jq -r '.deployments | length')
          in_progress_deployment_id=$(echo $deployments | jq -r '.deployments[0]')
          echo count=$count >> "$GITHUB_OUTPUT"
          echo in_progress_deployment_id=$in_progress_deployment_id >> "$GITHUB_OUTPUT"
          echo count=$count
          echo in_progress_deployment_id=$in_progress_deployment_id

      - name: Wait for other ongoing deployment to finish
        if: ${{ steps.deployment_in_progress.outputs.count }} > 0
        run: |
          echo ${{ steps.deployment_in_progress.outputs.count }}
          echo ${{ steps.deployment_in_progress.outputs.in_progress_deployment_id }}
          aws deploy wait deployment-successful --deployment-id ${{ steps.deployment_in_progress.outputs.in_progress_deployment_id }}

      - name: Create Deployment at AWS CodeDeploy
        id: codedeploy
        run: |
          deployment_id=$(aws deploy create-deployment --application-name ${{ env.CODEDEPLOY_APPLICATION }} --deployment-group-name ${{ env.DEPLOYMENT_GROUP }} --github-location repository=$GITHUB_REPOSITORY,commitId=$GITHUB_SHA --ignore-application-stop-failures --query "deploymentId" --output text --no-paginate)
          echo deployment_id=$deployment_id >> "$GITHUB_OUTPUT"

      - name: Wait and verify whether the deployment was successful
        run: |
          aws deploy wait deployment-successful --deployment-id ${{ steps.codedeploy.outputs.deployment_id }}
